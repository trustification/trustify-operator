package org.trustify.operator.services;

import io.fabric8.kubernetes.api.model.GenericKubernetesResource;
import io.fabric8.kubernetes.api.model.Secret;
import io.fabric8.kubernetes.api.model.SecretBuilder;
import io.fabric8.kubernetes.client.KubernetesClient;
import io.fabric8.kubernetes.client.KubernetesClientException;
import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;
import org.jboss.logging.Logger;
import org.trustify.operator.TrustifyConfig;
import org.trustify.operator.cdrs.v2alpha1.Trustify;

import java.util.Collections;
import java.util.Map;
import java.util.Optional;

public class OpenshiftCluster implements Cluster {

    private static final Logger logger = Logger.getLogger(OpenshiftCluster.class);

    private final KubernetesClient k8sClient;

    private String hostname;

    public OpenshiftCluster(KubernetesClient k8sClient) {
        this.k8sClient = k8sClient;
        init();
    }

    protected void init() {
        this.hostname = getClusterDomainOnOpenshift();
    }

    @Override
    public Optional<String> getAutoGeneratedIngressHost(Trustify cr) {
        return Optional.ofNullable(hostname).map(domain -> cr.getMetadata().getNamespace() + "-" + cr.getMetadata().getName() + "." + domain);
    }

    @Override
    public Optional<Secret> getAutoGeneratedServerTlsSecret(Trustify cr) {
        Secret selfGeneratedSecret = new SecretBuilder()
                .withNewMetadata()
                .withName(Cluster.getServerSelfGeneratedTlsSecretName(cr))
                .endMetadata()
                .build();
        Secret secret = k8sClient.resource(selfGeneratedSecret)
                .inNamespace(cr.getMetadata().getNamespace())
                .get();
        return Optional.ofNullable(secret);
    }

    @Override
    public TrustifyConfig.KeycloakSubscriptionConfig getKeycloakSubscriptionConfig() {
        return new TrustifyConfig.KeycloakSubscriptionConfig() {
            @Override
            public String namespace() {
                return "openshift-marketplace";
            }

            @Override
            public String source() {
                return "community-operators";
            }

            @Override
            public String channel() {
                return "fast";
            }
        };
    }

    protected String getClusterDomainOnOpenshift() {
        String clusterDomain = null;
        try {
            CustomResourceDefinitionContext customResourceDefinitionContext = new CustomResourceDefinitionContext.Builder()
                    .withName("Ingress")
                    .withGroup("config.openshift.io")
                    .withVersion("v1")
                    .withPlural("ingresses")
                    .withScope("Cluster")
                    .build();
            GenericKubernetesResource clusterObject = k8sClient.genericKubernetesResources(customResourceDefinitionContext)
                    .withName("cluster")
                    .get();

            Map<String, String> objectSpec = Optional.ofNullable(clusterObject)
                    .map(kubernetesResource -> kubernetesResource.<Map<String, String>>get("spec"))
                    .orElse(Collections.emptyMap());
            clusterDomain = objectSpec.get("domain");
        } catch (KubernetesClientException exception) {
            logger.warn("No Openshift host found");
        }
        return clusterDomain;
    }

}
